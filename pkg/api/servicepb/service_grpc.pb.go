// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FabulaClient is the client API for Fabula service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FabulaClient interface {
	Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error)
	Notarize(ctx context.Context, in *NotarizeRequest, opts ...grpc.CallOption) (*NotarizeResponse, error)
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	Sequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error)
}

type fabulaClient struct {
	cc grpc.ClientConnInterface
}

func NewFabulaClient(cc grpc.ClientConnInterface) FabulaClient {
	return &fabulaClient{cc}
}

func (c *fabulaClient) Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error) {
	out := new(RootResponse)
	err := c.cc.Invoke(ctx, "/fabula.Fabula/Root", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabulaClient) Notarize(ctx context.Context, in *NotarizeRequest, opts ...grpc.CallOption) (*NotarizeResponse, error) {
	out := new(NotarizeResponse)
	err := c.cc.Invoke(ctx, "/fabula.Fabula/Notarize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabulaClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/fabula.Fabula/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabulaClient) Sequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error) {
	out := new(SequenceResponse)
	err := c.cc.Invoke(ctx, "/fabula.Fabula/Sequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabulaServer is the server API for Fabula service.
// All implementations must embed UnimplementedFabulaServer
// for forward compatibility
type FabulaServer interface {
	Root(context.Context, *RootRequest) (*RootResponse, error)
	Notarize(context.Context, *NotarizeRequest) (*NotarizeResponse, error)
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	Sequence(context.Context, *SequenceRequest) (*SequenceResponse, error)
	mustEmbedUnimplementedFabulaServer()
}

// UnimplementedFabulaServer must be embedded to have forward compatible implementations.
type UnimplementedFabulaServer struct {
}

func (UnimplementedFabulaServer) Root(context.Context, *RootRequest) (*RootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Root not implemented")
}
func (UnimplementedFabulaServer) Notarize(context.Context, *NotarizeRequest) (*NotarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notarize not implemented")
}
func (UnimplementedFabulaServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedFabulaServer) Sequence(context.Context, *SequenceRequest) (*SequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sequence not implemented")
}
func (UnimplementedFabulaServer) mustEmbedUnimplementedFabulaServer() {}

// UnsafeFabulaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FabulaServer will
// result in compilation errors.
type UnsafeFabulaServer interface {
	mustEmbedUnimplementedFabulaServer()
}

func RegisterFabulaServer(s grpc.ServiceRegistrar, srv FabulaServer) {
	s.RegisterService(&_Fabula_serviceDesc, srv)
}

func _Fabula_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabulaServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fabula.Fabula/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabulaServer).Root(ctx, req.(*RootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fabula_Notarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabulaServer).Notarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fabula.Fabula/Notarize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabulaServer).Notarize(ctx, req.(*NotarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fabula_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabulaServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fabula.Fabula/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabulaServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fabula_Sequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabulaServer).Sequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fabula.Fabula/Sequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabulaServer).Sequence(ctx, req.(*SequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fabula_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fabula.Fabula",
	HandlerType: (*FabulaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Root",
			Handler:    _Fabula_Root_Handler,
		},
		{
			MethodName: "Notarize",
			Handler:    _Fabula_Notarize_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _Fabula_Batch_Handler,
		},
		{
			MethodName: "Sequence",
			Handler:    _Fabula_Sequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
