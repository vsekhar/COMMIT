// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package batcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InternalBatcherClient is the client API for InternalBatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalBatcherClient interface {
	// Add the current request to a batch and propagate upward (towards the
	// root prefix).
	//
	// Returns "Resource Exhausted" if the current batcher is busy. Clients
	// should extend BatchRequest.prefix by 1 byte (2 hex characters), lookup a
	// new batcher and try again.
	//
	// Separately, clients monitor broadcast messagse
	InternalBatch(ctx context.Context, in *InternalBatchRequest, opts ...grpc.CallOption) (*InternalBatchResponse, error)
}

type internalBatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalBatcherClient(cc grpc.ClientConnInterface) InternalBatcherClient {
	return &internalBatcherClient{cc}
}

func (c *internalBatcherClient) InternalBatch(ctx context.Context, in *InternalBatchRequest, opts ...grpc.CallOption) (*InternalBatchResponse, error) {
	out := new(InternalBatchResponse)
	err := c.cc.Invoke(ctx, "/fabula.InternalBatcher/InternalBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalBatcherServer is the server API for InternalBatcher service.
// All implementations must embed UnimplementedInternalBatcherServer
// for forward compatibility
type InternalBatcherServer interface {
	// Add the current request to a batch and propagate upward (towards the
	// root prefix).
	//
	// Returns "Resource Exhausted" if the current batcher is busy. Clients
	// should extend BatchRequest.prefix by 1 byte (2 hex characters), lookup a
	// new batcher and try again.
	//
	// Separately, clients monitor broadcast messagse
	InternalBatch(context.Context, *InternalBatchRequest) (*InternalBatchResponse, error)
	mustEmbedUnimplementedInternalBatcherServer()
}

// UnimplementedInternalBatcherServer must be embedded to have forward compatible implementations.
type UnimplementedInternalBatcherServer struct {
}

func (UnimplementedInternalBatcherServer) InternalBatch(context.Context, *InternalBatchRequest) (*InternalBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalBatch not implemented")
}
func (UnimplementedInternalBatcherServer) mustEmbedUnimplementedInternalBatcherServer() {}

// UnsafeInternalBatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalBatcherServer will
// result in compilation errors.
type UnsafeInternalBatcherServer interface {
	mustEmbedUnimplementedInternalBatcherServer()
}

func RegisterInternalBatcherServer(s grpc.ServiceRegistrar, srv InternalBatcherServer) {
	s.RegisterService(&_InternalBatcher_serviceDesc, srv)
}

func _InternalBatcher_InternalBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalBatcherServer).InternalBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fabula.InternalBatcher/InternalBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalBatcherServer).InternalBatch(ctx, req.(*InternalBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalBatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fabula.InternalBatcher",
	HandlerType: (*InternalBatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InternalBatch",
			Handler:    _InternalBatcher_InternalBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batcher/batcher.proto",
}
